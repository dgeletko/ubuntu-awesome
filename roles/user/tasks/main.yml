---

- name: install utils
  ansible.builtin.apt:
    state: present
    name:
      - autojump
      - bat
      - fd-find
      - fzf
      - htop
      - jq
      - netcat-openbsd
      - pdfgrep
      - pipx
      - playerctl
      - python3
      - ripgrep
      - rlwrap
      - socat
      - stow
      - tasksh
      - taskwarrior
      - tcpdump
      - tmux
      - tree
      - vim
      - vit

- name: install user desktop packages
  ansible.builtin.apt:
    state: present
    name: '{{pkgs_desktop_user | flatten | select}}'

- name: install dev tools
  block:
    - name: install dev tools
      ansible.builtin.apt:
        state: present
        name:
          - build-essential
          - cmake
          - cppcheck
          - curl
          - dos2unix
          - gdb-multiarch
          - git
          - git-gui
          - git-lfs
          - gitk
          - lcov
          - make
          - patch
          - pipenv
          - pkg-config
          - python3-pip
          - python3-setuptools
          - python3-venv
          - python3-wheel
          - valgrind
          - wget
  when: pkg_enable.devtools | bool

- name: install docker
  block:
    - name: install docker
      ansible.builtin.apt:
        state: present
        name:
          - docker.io
          - docker-buildx
          - docker-compose-v2
          - python3-docker

    - name: add {{user}} user to docker group
      user:
        name: '{{user}}'
        groups: docker
        append: true
  when: pkg_enable.docker | bool

- name: install libreoffice
  ansible.builtin.apt:
    state: present
    name:
      - libreoffice-calc
      - libreoffice-gtk3
      - libreoffice-help-en-us
      - libreoffice-impress
      - libreoffice-style-breeze
      - libreoffice-writer
  when: pkg_enable.libreoffice | bool

- name: install wireshark
  block:
    - name: allow wireshark to run non-root # must be set prior to installing package
      ansible.builtin.debconf:
        name: wireshark-common
        question: wireshark-common/install-setuid
        value: 'true'
        vtype: select

    - name: install wireshark
      ansible.builtin.apt:
        state: present
        name:
          - wireshark

    - name: add user to wireshark group
      ansible.builtin.user:
        name: '{{user}}'
        append: true
        groups: wireshark
  when: pkg_enable.wireshark | bool

- name: install virtualbox
  block:
    - name: install virtualbox
      ansible.builtin.apt:
        state: present
        name:
          - libsdl-ttf2.0-0
          - virtualbox-7.2

    - name: add user to vboxusers group
      ansible.builtin.user:
        name: '{{user}}'
        append: true
        groups: vboxusers
  when:
    - ansible_facts['virtualization_role'] != "guest"
    - pkg_enable.virtualbox | bool

- name: install vscode
  block:
    - name: install vscode
      ansible.builtin.apt:
        state: present
        name:
          - code

    - name: install vscode extensions
      become_user: '{{user}}'
      ansible.builtin.command: 'code --install-extension {{item}}'
      register: install_vscode_extension
      args:
        creates: '~/.vscode/extensions/{{item}}-*'
      loop: '{{vscode_extensions}}'
  when: pkg_enable.vscode | bool

- name: install latest rust
  become_user: '{{user}}'
  ansible.builtin.shell:
    cmd: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    creates: ~/.cargo/bin/rustc
  when: pkg_enable.rust | bool

- name: install neovim
  block:
    - name: install neovim
      ansible.builtin.unarchive:
        src: https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz
        dest: /opt
        creates: /opt/nvim-linux-x86_64
        remote_src: true

    - name: create neovim symlink
      ansible.builtin.file:
        src: /opt/nvim-linux-x86_64/bin/nvim
        dest: /usr/local/bin/nvim
        state: link
  when: pkg_enable.neovim | bool

- name: install lazydocker
  block:
    - name: create lazydocker install directory
      ansible.builtin.file:
        path: /opt/lazydocker
        state: directory

    - name: get latest lazydocker version
      ansible.builtin.uri:
        url: https://api.github.com/repos/jesseduffield/lazydocker/releases/latest
        return_content: true
      register: lazydocker

    - name: install lazydocker
      ansible.builtin.unarchive:
        src: https://github.com/jesseduffield/lazydocker/releases/latest/download/lazydocker_{{lazydocker.json.tag_name | trim('v')}}_Linux_x86_64.tar.gz
        dest: /opt/lazydocker
        creates: /opt/lazydocker/lazydocker
        remote_src: true

    - name: create lazydocker symlink
      ansible.builtin.file:
        src: /opt/lazydocker/lazydocker
        dest: /usr/local/bin/lazydocker
        state: link
  when: pkg_enable.lazydocker | bool

- name: install lazygit
  block:
    - name: create lazygit install directory
      ansible.builtin.file:
        path: /opt/lazygit
        state: directory

    - name: get latest lazygit version
      ansible.builtin.uri:
        url: https://api.github.com/repos/jesseduffield/lazygit/releases/latest
        return_content: true
      register: lazygit

    - name: install lazygit
      ansible.builtin.unarchive:
        src: https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{lazygit.json.tag_name | trim('v')}}_Linux_x86_64.tar.gz
        dest: /opt/lazygit
        creates: /opt/lazygit/lazygit
        remote_src: true

    - name: create lazygit symlink
      ansible.builtin.file:
        src: /opt/lazygit/lazygit
        dest: /usr/local/bin/lazygit
        state: link
  when: pkg_enable.lazygit | bool

- name: install nerd fonts
  become_user: '{{user}}'
  vars:
    fonts_dir: ~/.local/share/fonts
  block:
    - name: create local fonts directory
      ansible.builtin.file:
        path: '{{fonts_dir}}/{{item.name}}'
        state: directory
      loop: '{{nerd_fonts}}'
      loop_control:
        label: '{{item.name}}'

    - name: install nerd fonts
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/latest/download/{{item.pkg}}.zip
        dest: '{{fonts_dir}}/{{item.name}}'
        creates: '{{fonts_dir}}/{{item.name}}/LICENSE'
        creates: '{{fonts_dir}}/{{item.name}}'
        remote_src: true
      loop: '{{nerd_fonts}}'
      loop_control:
        label: '{{item.name}}'

- name: config xdg directories
  become_user: '{{user}}'
  block:
    - name: remove xdg user dirs
      ansible.builtin.file:
        path: '~/{{item}}'
        state: absent
      loop:
        - Templates
        - Public
      register: xdg_user_dirs

    - name: update xdg user dirs
      ansible.builtin.command: xdg-user-dirs-update
      when: xdg_user_dirs.changed

- name: copy bash aliases
  become_user: '{{user}}'
  ansible.builtin.copy:
    src: files/home/bash_aliases
    dest: ~/.bash_aliases

- name: dotfiles
  become_user: '{{user}}'
  block:
    - name: clone dotfiles repo
      ansible.builtin.git:
        repo: '{{dotfiles.repo}}'
        dest: '{{dotfiles.dest}}'
        key_file: '{{dotfiles.key | default(omit)}}'
        update: false
        force: false

    - name: install dotfile
      ansible.builtin.command:
        cmd: stow --dir={{dotfiles.dest}} --target=/home/{{user}} --verbose=2 {{item}}
      register: stow
      changed_when: "'LINK:' in stow.stderr"
      loop: '{{dotfiles.pkgs}}'
  when: dotfiles is defined
  tags: dotfiles

